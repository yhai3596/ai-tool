import * as babel from '@babel/core';
import * as t from '@babel/types';
import { extractComponentInfo, formatComponentContent } from '../utils/component-utils.js';
export async function transformJsx(code, id, options) {
    const result = await babel.transformAsync(code, {
        filename: id,
        parserOpts: {
            sourceType: 'module',
            allowAwaitOutsideFunction: true,
            plugins: [
                'jsx',
                'typescript',
                'decorators-legacy',
                'classProperties',
                'objectRestSpread'
            ],
        },
        plugins: [createBabelPlugin(id, options)],
        sourceMaps: true,
    });
    if (!result || !result.code) {
        return null;
    }
    return {
        code: result.code,
        map: result.map,
    };
}
function createBabelPlugin(filePath, options) {
    const { attributePrefix, includeProps } = options;
    return {
        visitor: {
            JSXOpeningElement(path, state) {
                // 避免重复处理已经添加了标识的元素
                const hasIdentifier = path.node.attributes.some((attr) => t.isJSXAttribute(attr) &&
                    t.isJSXIdentifier(attr.name) &&
                    attr.name.name === `${attributePrefix}-id`);
                if (hasIdentifier) {
                    return;
                }
                const location = path.node.loc;
                if (!location) {
                    return;
                }
                // 获取组件信息
                const componentInfo = extractComponentInfo(path, filePath);
                // 构建属性列表
                const attributes = createDataAttributes(filePath, location, componentInfo, options);
                // 添加所有属性到元素
                attributes.forEach(attr => {
                    path.node.attributes.push(attr);
                });
            },
        },
    };
}
function createDataAttributes(filePath, location, componentInfo, options) {
    const { attributePrefix, includeProps } = options;
    const { start } = location;
    // 提取文件信息
    const fileName = filePath.split('/').pop() || filePath;
    const relativePath = filePath.replace(process.cwd(), '').replace(/^\//, '');
    // 构造各种属性值
    const lovId = `${relativePath}:${start.line}:${start.column}`;
    const componentContent = includeProps ? formatComponentContent(componentInfo.props) : '';
    const attributes = [
        // data-mx-id
        t.jSXAttribute(t.jSXIdentifier(`${attributePrefix}-id`), t.stringLiteral(lovId)),
        // data-mx-name
        t.jSXAttribute(t.jSXIdentifier(`${attributePrefix}-name`), t.stringLiteral(componentInfo.name)),
        // data-component-path
        t.jSXAttribute(t.jSXIdentifier('data-component-path'), t.stringLiteral(relativePath)),
        // data-component-line
        t.jSXAttribute(t.jSXIdentifier('data-component-line'), t.stringLiteral(start.line.toString())),
        // data-component-file
        t.jSXAttribute(t.jSXIdentifier('data-component-file'), t.stringLiteral(fileName)),
        // data-component-name
        t.jSXAttribute(t.jSXIdentifier('data-component-name'), t.stringLiteral(componentInfo.name)),
    ];
    // 如果包含 props，添加 data-component-content
    if (includeProps && componentContent) {
        attributes.push(t.jSXAttribute(t.jSXIdentifier('data-component-content'), t.stringLiteral(componentContent)));
    }
    return attributes;
}
